precision mediump float;

uniform sampler2D u_texture;
uniform float u_readingVision;
uniform float u_contrastBoost;
uniform float u_edgeEnhancement;
uniform vec2 u_resolution;

varying vec2 v_texCoord;

// Gaussian blur kernel for unsharp masking
vec4 gaussianBlur(sampler2D tex, vec2 texCoord, vec2 texelSize, float radius) {
    vec4 result = vec4(0.0);
    float totalWeight = 0.0;
    
    for (int i = -3; i <= 3; i++) {
        for (int j = -3; j <= 3; j++) {
            vec2 offset = vec2(float(i), float(j)) * texelSize;
            float distance = float(i*i + j*j);
            float weight = exp(-distance / (2.0 * radius * radius));
            result += texture2D(tex, texCoord + offset) * weight;
            totalWeight += weight;
        }
    }
    
    return result / totalWeight;
}

// Unsharp mask algorithm specifically for presbyopia text sharpening
vec4 unsharpMask(vec2 texCoord) {
    vec2 texelSize = 1.0 / u_resolution;
    vec4 center = texture2D(u_texture, texCoord);
    
    // Calculate blur based on reading vision strength
    float blurRadius = 1.0 + (u_readingVision / 3.5) * 2.0; // Adaptive blur radius
    vec4 blurred = gaussianBlur(u_texture, texCoord, texelSize, blurRadius);
    
    // Apply unsharp mask with adaptive strength
    float strength = u_readingVision / 3.5; // Normalize to 0-1 range
    strength = clamp(strength, 0.0, 1.0);
    
    // Enhanced unsharp mask for presbyopia
    vec4 difference = center - blurred;
    vec4 sharpened = center + difference * strength * 1.5; // Boosted strength for presbyopia
    
    return clamp(sharpened, 0.0, 1.0);
}

// Sobel edge detection for enhanced text edges
vec4 sobelEdgeDetection(vec2 texCoord) {
    vec2 texelSize = 1.0 / u_resolution;
    vec4 center = texture2D(u_texture, texCoord);
    
    // Sobel X kernel
    vec4 gx = vec4(0.0);
    gx += texture2D(u_texture, texCoord + vec2(-1.0, -1.0) * texelSize) * -1.0;
    gx += texture2D(u_texture, texCoord + vec2( 0.0, -1.0) * texelSize) * -2.0;
    gx += texture2D(u_texture, texCoord + vec2( 1.0, -1.0) * texelSize) * -1.0;
    gx += texture2D(u_texture, texCoord + vec2(-1.0,  1.0) * texelSize) *  1.0;
    gx += texture2D(u_texture, texCoord + vec2( 0.0,  1.0) * texelSize) *  2.0;
    gx += texture2D(u_texture, texCoord + vec2( 1.0,  1.0) * texelSize) *  1.0;
    
    // Sobel Y kernel
    vec4 gy = vec4(0.0);
    gy += texture2D(u_texture, texCoord + vec2(-1.0, -1.0) * texelSize) * -1.0;
    gy += texture2D(u_texture, texCoord + vec2(-1.0,  0.0) * texelSize) * -2.0;
    gy += texture2D(u_texture, texCoord + vec2(-1.0,  1.0) * texelSize) * -1.0;
    gy += texture2D(u_texture, texCoord + vec2( 1.0, -1.0) * texelSize) *  1.0;
    gy += texture2D(u_texture, texCoord + vec2( 1.0,  0.0) * texelSize) *  2.0;
    gy += texture2D(u_texture, texCoord + vec2( 1.0,  1.0) * texelSize) *  1.0;
    
    // Calculate edge magnitude
    vec4 edgeMagnitude = sqrt(gx * gx + gy * gy);
    
    return edgeMagnitude;
}

// Edge enhancement specifically for presbyopia text
vec4 edgeEnhancement(vec2 texCoord) {
    vec4 center = texture2D(u_texture, texCoord);
    vec4 edges = sobelEdgeDetection(texCoord);
    
    // Adaptive edge enhancement based on reading vision
    float edgeStrength = u_edgeEnhancement / 100.0;
    edgeStrength = clamp(edgeStrength, 0.0, 1.0);
    
    // Enhanced edge detection for text
    float edgeThreshold = 0.1;
    vec4 enhancedEdges = step(edgeThreshold, edges) * edges * edgeStrength;
    
    // Combine with original image
    vec4 result = center + enhancedEdges;
    
    return clamp(result, 0.0, 1.0);
}

// Contrast adjustment optimized for presbyopia
vec4 adjustContrast(vec4 color) {
    float contrast = 1.0 + u_contrastBoost / 100.0;
    contrast = clamp(contrast, 0.5, 2.0); // Reasonable bounds
    
    // Enhanced contrast for presbyopia
    vec4 adjusted = (color - 0.5) * contrast + 0.5;
    
    // Additional brightness boost for low contrast text
    float brightness = 1.0 + (u_contrastBoost / 200.0);
    adjusted *= brightness;
    
    return clamp(adjusted, 0.0, 1.0);
}

// Local contrast enhancement for text readability
vec4 enhanceLocalContrast(vec2 texCoord) {
    vec2 texelSize = 1.0 / u_resolution;
    vec4 center = texture2D(u_texture, texCoord);
    
    // Sample local neighborhood
    vec4 localMin = vec4(1.0);
    vec4 localMax = vec4(0.0);
    
    for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
            vec2 offset = vec2(float(i), float(j)) * texelSize;
            vec4 sample = texture2D(u_texture, texCoord + offset);
            localMin = min(localMin, sample);
            localMax = max(localMax, sample);
        }
    }
    
    // Enhance local contrast
    vec4 localContrast = localMax - localMin;
    float enhancement = u_contrastBoost / 100.0;
    
    vec4 enhanced = center + localContrast * enhancement * 0.5;
    return clamp(enhanced, 0.0, 1.0);
}

// Presbyopia-specific text sharpening
vec4 presbyopiaSharpening(vec2 texCoord) {
    vec4 color = texture2D(u_texture, texCoord);
    
    // Apply unsharp mask for general sharpening
    color = unsharpMask(texCoord);
    
    // Apply edge enhancement for text edges
    color = edgeEnhancement(texCoord);
    
    // Apply local contrast enhancement
    color = enhanceLocalContrast(texCoord);
    
    // Apply contrast and brightness adjustment
    color = adjustContrast(color);
    
    return color;
}

// Main fragment shader function
void main() {
    vec4 color = texture2D(u_texture, v_texCoord);
    
    // Apply presbyopia correction pipeline
    color = presbyopiaSharpening(v_texCoord);
    
    // Final output
    gl_FragColor = color;
} 